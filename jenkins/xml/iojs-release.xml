<?xml version='1.1' encoding='UTF-8'?>
<matrix-project plugin="matrix-project@1.13">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.29.2">
      <projectUrl>https://github.com/nodejs/node/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <jp.ikedam.jenkins.plugins.scoringloadbalancer.preferences.BuildPreferenceJobProperty plugin="scoring-load-balancer@1.0.1">
      <buildPreferenceList>
        <jp.ikedam.jenkins.plugins.scoringloadbalancer.preferences.BuildPreference>
          <labelExpression>master</labelExpression>
          <preference>1</preference>
        </jp.ikedam.jenkins.plugins.scoringloadbalancer.preferences.BuildPreference>
      </buildPreferenceList>
    </jp.ikedam.jenkins.plugins.scoringloadbalancer.preferences.BuildPreferenceJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.28">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>repository</name>
          <description>Change to point at a fork or private repo if deploy key matches, must be git@ style, e.g. git@github.com:nodejs/node-private.git</description>
          <defaultValue>https://github.com/nodejs/node.git</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>commit</name>
          <description>A proper commit sha, first 10 characters: git rev-parse --short HEAD</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>datestring</name>
          <description>[Only needed for nightly] Complete reverse date string, YYYYMMDD, UTC: date -u +&apos;%Y%m%d&apos;</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>disttype</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>release</string>
              <string>nightly</string>
              <string>rc</string>
              <string>v8-canary</string>
              <string>test</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>rc</name>
          <description>If an RC build, set this to an appropriate number, otherwise leave as 0</description>
          <defaultValue>0</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <matrixOptions>
        <throttleMatrixBuilds>true</throttleMatrixBuilds>
        <throttleMatrixConfigurations>false</throttleMatrixConfigurations>
      </matrixOptions>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.9.1">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>$repository</url>
        <credentialsId>b3763924-ad7b-4869-9f86-92801822de78</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>$commit</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <browser class="hudson.plugins.git.browser.GithubWeb">
      <url>https://github.com/nodejs/node</url>
    </browser>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanCheckout/>
      <hudson.plugins.git.extensions.impl.CloneOption>
        <shallow>false</shallow>
        <noTags>false</noTags>
        <reference>/home/iojs/.ccache/node.shared.reference</reference>
        <timeout>30</timeout>
        <depth>0</depth>
        <honorRefspec>false</honorRefspec>
      </hudson.plugins.git.extensions.impl.CloneOption>
      <hudson.plugins.git.extensions.impl.CheckoutOption>
        <timeout>30</timeout>
      </hudson.plugins.git.extensions.impl.CheckoutOption>
      <org.nodejs.jenkinsplugins.nodeversion.NodeVersionExtension plugin="node-version-jenkins-plugin@1.0-SNAPSHOT">
        <detectNodejsVersion>true</detectNodejsVersion>
      </org.nodejs.jenkinsplugins.nodeversion.NodeVersionExtension>
    </extensions>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <customWorkspace>ws</customWorkspace>
  <axes>
    <hudson.matrix.LabelAxis>
      <name>nodes</name>
      <values>
        <string>aix61-ppc64</string>
        <string>centos5-release-32</string>
        <string>centos5-release-64</string>
        <string>centos6-32-gcc48</string>
        <string>centos6-32-gcc6</string>
        <string>centos6-64-gcc48</string>
        <string>centos6-64-gcc6</string>
        <string>centos7-arm64</string>
        <string>cross-compiler-armv6-gcc-4.9.4</string>
        <string>cross-compiler-armv7-gcc-4.9.4</string>
        <string>debian7-docker-armv7</string>
        <string>osx1010-release-pkg</string>
        <string>osx1010-release-tar</string>
        <string>osx1011-release-pkg</string>
        <string>osx1011-release-tar</string>
        <string>pi1-docker</string>
        <string>ppcbe-ubuntu1404-release-64</string>
        <string>ppcle-ubuntu1404-release-64</string>
        <string>rhel72-s390x-release</string>
        <string>smartos14-release</string>
        <string>smartos15-release</string>
        <string>smartos17-release</string>
        <string>vs2013-x64</string>
        <string>vs2013-x86</string>
        <string>vs2015-x64</string>
        <string>vs2015-x86</string>
        <string>vs2017-x64</string>
        <string>vs2017-x86</string>
      </values>
    </hudson.matrix.LabelAxis>
  </axes>
  <builders>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.core.ExpressionCondition" plugin="run-condition@1.0">
        <expression>Windows_NT</expression>
        <label>${ENV, var=&quot;OS&quot;}</label>
      </runCondition>
      <conditionalbuilders>
        <EnvInjectBuilder plugin="envinject@2.1.6">
          <info>
            <propertiesContent>PYTHON=c:\\python27\\python.exe
NODE_COMMON_PORT=12301
DESTCPU=$DESTCPU
DISTTYPE=$disttype
DATESTRING=$datestring
COMMIT=$commit
CUSTOMTAG=rc.$rc
SSHCONFIG=\\config</propertiesContent>
          </info>
        </EnvInjectBuilder>
        <hudson.tasks.BatchFile>
          <command>for /F &quot;delims=. tokens=1&quot; %%F in (&apos;call &quot;%PYTHON%&quot; tools\getnodeversion.py&apos;) do (&#xd;
  set &quot;NODE_MAJOR_VERSION=%%F&quot;&#xd;
)&#xd;
&#xd;
set RELEASE_URLBASE=https://nodejs.org/download/%DISTTYPE%/&#xd;
if &quot;%DISTTYPE%&quot;==&quot;test&quot; (&#xd;
  set DISTTYPE=custom&#xd;
  set CUSTOMTAG=test%DATESTRING%%COMMIT%&#xd;
  set RELEASE_URLBASE=https://nodejs.org/download/test/&#xd;
)&#xd;
if &quot;%DISTTYPE%&quot;==&quot;v8-canary&quot; (&#xd;
  set DISTTYPE=custom&#xd;
  set CUSTOMTAG=v8-canary%DATESTRING%%COMMIT%&#xd;
  set RELEASE_URLBASE=https://nodejs.org/download/v8-canary/&#xd;
)&#xd;
if &quot;%DISTTYPE%&quot;==&quot;rc&quot; (&#xd;
  set DISTTYPE=custom&#xd;
  # CUSTOMTAG rc set in properties&#xd;
  set RELEASE_URLBASE=https://nodejs.org/download/rc/&#xd;
)&#xd;
set DISTTYPEDIR=%DISTTYPE%&#xd;
&#xd;
if &quot;%nodes:~0,7%&quot;==&quot;vs2013-&quot; (&#xd;
  if %NODE_MAJOR_VERSION% GEQ 6 (&#xd;
    echo Not building %disttype% for v%NODE_MAJOR_VERSION% on Windows slave with VS2013 as it should only be used up to v5.x&#xd;
    exit /b 0&#xd;
  )&#xd;
  set GYP_MSVS_VERSION=2013&#xd;
) else if &quot;%nodes:~0,7%&quot;==&quot;vs2015-&quot; (&#xd;
  if %NODE_MAJOR_VERSION% LSS 6 (&#xd;
    echo Not building %disttype% for v%NODE_MAJOR_VERSION% on Windows slave with VS2015 as it should only be used for v6.x and later&#xd;
    exit /b 0&#xd;
  )&#xd;
  if %NODE_MAJOR_VERSION% GEQ 10 (&#xd;
    echo Not building %disttype% for v%NODE_MAJOR_VERSION% on Windows slave with VS2015 as it should only be used up to v9.x&#xd;
    exit /b 0&#xd;
  )&#xd;
  set GYP_MSVS_VERSION=2015&#xd;
) else if &quot;%nodes:~0,7%&quot;==&quot;vs2017-&quot; (&#xd;
  if %NODE_MAJOR_VERSION% LSS 10 (&#xd;
    echo Not building %disttype% for v%NODE_MAJOR_VERSION% on Windows slave with VS2017 as it should only be used for v10.x and later&#xd;
    exit /b 0&#xd;
  )&#xd;
) else (&#xd;
  echo ERROR: Running on unsupported node: %nodes%&#xd;
  exit /b 1&#xd;
)&#xd;
&#xd;
if &quot;%nodes:~-4%&quot; == &quot;-x86&quot; (&#xd;
  set ARCH=x86&#xd;
) else if &quot;%nodes:~-4%&quot; == &quot;-x64&quot; (&#xd;
  set ARCH=x64&#xd;
) else (&#xd;
  echo ERROR: Running on unsupported node: %nodes%&#xd;
  exit /b 1&#xd;
)&#xd;
&#xd;
copy c:\node-icu\*.zip deps || true&#xd;
vcbuild.bat build-release %ARCH% upload&#xd;
</command>
        </hudson.tasks.BatchFile>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.core.ExpressionCondition" plugin="run-condition@1.0">
        <expression>rhel72-s390x-release|ppcle-ubuntu1404-release-64|ppcbe-ubuntu1404-release-64|pi1-docker|debian7-docker-armv7|debian8-docker-armv7|armv8-ubuntu1404-release|centos7-arm64|centos5-release-(32|64)|centos6-(32|64)-gcc(48|6)|osx10\d\d-release-tar|cross-compiler-armv6-gcc-4.9.4|cross-compiler-armv7-gcc-4.9.4</expression>
        <label>${ENV, var=&quot;nodes&quot;}</label>
      </runCondition>
      <conditionalbuilders>
        <EnvInjectBuilder plugin="envinject@2.1.6">
          <info>
            <propertiesContent>CODESIGN_CERT=Developer ID Application: Node.js Foundation</propertiesContent>
          </info>
        </EnvInjectBuilder>
        <hudson.tasks.Shell>
          <command>#!/bin/bash -ex

NODE_MAJOR_VERSION=$(cat src/node_version.h | grep &quot;#define NODE_MAJOR_VERSION&quot; | awk &apos;{ print $3}&apos;)

if [[ $ARCH == ppc64 &amp;&amp; ${NODE_MAJOR_VERSION} -gt 7 ]]; then
  echo &quot;Not building $disttype on PPC Big Endian slave $NODE_NAME as not supported for v8.x and later&quot;
  exit 0
fi

rm -rf build
git clone https://github.com/nodejs/build.git
. ./build/jenkins/scripts/select-compiler.sh

RELEASE_URLBASE=https://nodejs.org/download/${disttype}/
if [ &quot;X${disttype}&quot; == &quot;Xtest&quot; ]; then
  disttype=custom
  CUSTOMTAG=&quot;test${datestring}${commit}&quot;
  RELEASE_URLBASE=https://nodejs.org/download/test/
elif [ &quot;X${disttype}&quot; == &quot;Xv8-canary&quot; ]; then
  disttype=custom
  CUSTOMTAG=&quot;v8-canary${datestring}${commit}&quot;
  RELEASE_URLBASE=https://nodejs.org/download/v8-canary/
elif [ &quot;X${disttype}&quot; == &quot;Xrc&quot; ]; then
  disttype=custom
  CUSTOMTAG=&quot;rc.$rc&quot;
  RELEASE_URLBASE=https://nodejs.org/download/rc/
fi

# manually force all docker builds to be &quot;custom&quot; / &quot;experimental&quot;, also forced
# in the promotion tool on the server
if [[ &quot;X${OSVARIANT}&quot; == &quot;Xdocker&quot; ]]; then
  disttype=custom
  RELEASE_URLBASE=&quot;https://nodejs.org/download/experimental/&quot;
fi

if [[ &quot;X${disttype}&quot; != &quot;Xrelease&quot; ]]; then
  perl -pi -e &quot;s/: release-only/:/g&quot; Makefile
fi

CONFIG_FLAGS=&quot;--download-path=${HOME}/node-icu/&quot;

if [[ &quot;$nodes&quot; =~ cross-compiler-arm ]]; then
  . /opt/raspberrypi/cc-selector.sh $nodes
  echo &quot;Compiling with GCC $gcc_version&quot;
  $CC --version
fi

echo ostype=$OSTYPE
echo arch=$ARCH
echo destcpu=$DESTCPU
echo PATH=$PATH
echo CONFIG_FLAGS=$CONFIG_FLAGS

if [ -z ${JOBS+x} ]; then
  export JOBS=2
fi

mkdir -p ${HOME}/node-icu/
exec_cmd=&quot;make -j $JOBS binary-upload \
  DESTCPU=\&quot;$DESTCPU\&quot; \
  ARCH=\&quot;$ARCH\&quot; \
  DISTTYPE=\&quot;$disttype\&quot; \
  DATESTRING=\&quot;$datestring\&quot; \
  COMMIT=\&quot;$commit\&quot; \
  CUSTOMTAG=\&quot;$CUSTOMTAG\&quot; \
  RELEASE_URLBASE=\&quot;$RELEASE_URLBASE\&quot; \
  CONFIG_FLAGS=\&quot;$CONFIG_FLAGS\&quot; \
&quot;

if [[ &quot;$NODE_LABELS&quot; =~ (pi1-docker|docker-armv7) ]]; then
  xzlvl=9
  if [[ &quot;$NODE_LABELS&quot; =~ pi1-docker ]]; then
    xzlvl=6
  fi
  echo &quot;$exec_cmd XZ_COMPRESSION=$xzlvl&quot; &gt; node-ci-exec
  if test $NODE_MAJOR_VERSION -ge 10; then
    echo &quot;Skipping ARMv6/7 native-compile for Node 10+...&quot;
    exit 0
    sudo docker-node-exec.sh -v jessie
  else
    sudo docker-node-exec.sh -v wheezy
  fi
else
  if [[ &quot;$nodes&quot; =~ centos6-(64|32)-gcc48 ]]; then
    exec_cmd=&quot;. /opt/rh/devtoolset-2/enable; $exec_cmd&quot;
  elif [[ &quot;$nodes&quot; =~ centos[67]-(arm)?(64|32)-gcc6 ]]; then
    exec_cmd=&quot;. /opt/rh/devtoolset-6/enable; $exec_cmd&quot;
  fi

  sh -c &quot;$exec_cmd&quot;
fi
</command>
        </hudson.tasks.Shell>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.core.ExpressionCondition" plugin="run-condition@1.0">
        <expression>solaris</expression>
        <label>${ENV, var=&quot;OSTYPE&quot;}</label>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>#!/bin/bash -ex

RELEASE_URLBASE=https://nodejs.org/download/${disttype}/
if [ &quot;X${disttype}&quot; == &quot;Xtest&quot; ]; then
  disttype=custom
  CUSTOMTAG=&quot;test${datestring}${commit}&quot;
  RELEASE_URLBASE=https://nodejs.org/download/test/
elif [ &quot;X${disttype}&quot; == &quot;Xv8-canary&quot; ]; then
  disttype=custom
  CUSTOMTAG=&quot;v8-canary${datestring}${commit}&quot;
  RELEASE_URLBASE=https://nodejs.org/download/v8-canary/
elif [ &quot;X${disttype}&quot; == &quot;Xrc&quot; ]; then
  disttype=custom
  CUSTOMTAG=&quot;rc.$rc&quot;
  RELEASE_URLBASE=https://nodejs.org/download/rc/
fi

CONFIG_FLAGS=&quot;--download-path=${HOME}/node-icu/&quot;

#if [[ ${MAJOR_VERSION} -ge &quot;7&quot; ]]; then
# OSTYPE=smartos
#else
# OSTYPE=solaris
#fi
 
mkdir -p ${HOME}/node-icu/
 
mkdir -p ../tmp-artifacts
rm -rf ../tmp-artifacts
mkdir ../tmp-artifacts
 
if [ -z ${JOBS+x} ]; then
  export JOBS=2
fi

if [[ &quot;X${disttype}&quot; != &quot;Xrelease&quot; ]]; then
  perl -pi -e &quot;s/: release-only/:/g&quot; Makefile
fi

make -j $JOBS binary-upload \
  DESTCPU=&quot;x64&quot; \
  ARCH=&quot;x64&quot; \
  DISTTYPE=&quot;$disttype&quot; \
  CUSTOMTAG=&quot;$CUSTOMTAG&quot; \
  DATESTRING=&quot;$datestring&quot; \
  COMMIT=&quot;$commit&quot; \
  RELEASE_URLBASE=&quot;$RELEASE_URLBASE&quot; \
  CONFIG_FLAGS=&quot;$CONFIG_FLAGS&quot;

# 32-bit builds for Node &lt;10 only
if [[ &quot;$nodes&quot; =~ smartos(14|15) ]]; then
  mv *-v*.* ../tmp-artifacts
  git reset --hard
  git clean -fdx

  if [[ &quot;X${disttype}&quot; != &quot;Xrelease&quot; ]]; then
    perl -pi -e &quot;s/: release-only/:/g&quot; Makefile
  fi

  make -j $JOBS binary-upload \
    DESTCPU=&quot;x86&quot; \
    ARCH=&quot;x86&quot; \
    DISTTYPE=&quot;$disttype&quot; \
    CUSTOMTAG=&quot;$CUSTOMTAG&quot; \
    DATESTRING=&quot;$datestring&quot; \
    COMMIT=&quot;$commit&quot; \
    RELEASE_URLBASE=&quot;$RELEASE_URLBASE&quot; \
    CONFIG_FLAGS=&quot;$CONFIG_FLAGS&quot;

  mv ../tmp-artifacts/* .
  rm -rf ../tmp-artifacts
fi</command>
        </hudson.tasks.Shell>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.core.ExpressionCondition" plugin="run-condition@1.0">
        <expression>AIX61</expression>
        <label>${ENV, var=&quot;OSTYPE&quot;}</label>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>#!/bin/bash -ex

# LIBPATH must be set to /opt/freeware/lib for the git plugin to work, however
# it must be unset for the build.  The ansible start script sets the libpath
# so that when git runs its set, but we must unset it here otherwise it
# causes the build to find the 32 bit stdc++ library instead of the 64 bit one
# that we need when running binaries (like mksnapshot) since our target is 64 bit
unset LIBPATH
echo LIBPATH:$LIBPATH

RELEASE_URLBASE=https://nodejs.org/download/${disttype}/
if [ &quot;X${disttype}&quot; == &quot;Xtest&quot; ]; then
  disttype=custom
  CUSTOMTAG=&quot;test${datestring}${commit}&quot;
  RELEASE_URLBASE=https://nodejs.org/download/test/
elif [ &quot;X${disttype}&quot; == &quot;Xv8-canary&quot; ]; then
  disttype=custom
  CUSTOMTAG=&quot;v8-canary${datestring}${commit}&quot;
  RELEASE_URLBASE=https://nodejs.org/download/v8-canary/
elif [ &quot;X${disttype}&quot; == &quot;Xrc&quot; ]; then
  disttype=custom
  CUSTOMTAG=&quot;rc.$rc&quot;
  RELEASE_URLBASE=https://nodejs.org/download/rc/
fi

# manually force all docker builds to be &quot;custom&quot; / &quot;experimental&quot;, also forced
# in the promotion tool on the server
if [&quot;X${OSVARIANT}&quot; == &quot;Xdocker&quot; ]; then
  disttype=custom
  RELEASE_URLBASE=&quot;https://nodejs.org/download/experimental/&quot;
fi

if [[ &quot;X${disttype}&quot; != &quot;Xrelease&quot; ]]; then
  perl -pi -e &quot;s/: release-only/:/g&quot; Makefile
fi

echo ostype=$OSTYPE
echo arch=$ARCH
echo destcpu=$DESTCPU
echo PATH=$PATH
echo CONFIG_FLAGS=$CONFIG_FLAGS

if [ -z ${JOBS+x} ]; then
  export JOBS=2
fi

rm -rf build
git clone https://github.com/nodejs/build.git
. ./build/jenkins/scripts/select-compiler.sh

# CC is now set by compiler selection script above
# as opposed to CC=gcc gmake -j $JOBS binary-upload
mkdir -p ${HOME}/node-icu/
gmake -j $JOBS binary-upload \
  DESTCPU=&quot;$DESTCPU&quot; \
  ARCH=&quot;$ARCH&quot; \
  DISTTYPE=&quot;$disttype&quot; \
  DATESTRING=&quot;$datestring&quot; \
  COMMIT=&quot;$commit&quot; \
  CUSTOMTAG=&quot;$CUSTOMTAG&quot; \
  RELEASE_URLBASE=&quot;$RELEASE_URLBASE&quot; \
  CONFIG_FLAGS=&quot;$CONFIG_FLAGS&quot;
</command>
        </hudson.tasks.Shell>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.core.ExpressionCondition" plugin="run-condition@1.0">
        <expression>osx10\d\d-release-pkg</expression>
        <label>${ENV, var=&quot;nodes&quot;}</label>
      </runCondition>
      <conditionalbuilders>
        <EnvInjectBuilder plugin="envinject@2.1.6">
          <info>
            <propertiesContent>CODESIGN_CERT=Developer ID Application: Node.js Foundation
PRODUCTSIGN_CERT=Developer ID Installer: Node.js Foundation
PACKAGEMAKER=~/PackageMaker.app/Contents/MacOS/PackageMaker</propertiesContent>
          </info>
        </EnvInjectBuilder>
        <hudson.tasks.Shell>
          <command>#!/bin/bash -ex

RELEASE_URLBASE=https://nodejs.org/download/${disttype}/
if [ &quot;X${disttype}&quot; == &quot;Xtest&quot; ]; then
  disttype=custom
  CUSTOMTAG=&quot;test${datestring}${commit}&quot;
  RELEASE_URLBASE=https://nodejs.org/download/test/
elif [ &quot;X${disttype}&quot; == &quot;Xv8-canary&quot; ]; then
  disttype=custom
  CUSTOMTAG=&quot;v8-canary${datestring}${commit}&quot;
  RELEASE_URLBASE=https://nodejs.org/download/v8-canary/
elif [ &quot;X${disttype}&quot; == &quot;Xrc&quot; ]; then
  disttype=custom
  CUSTOMTAG=&quot;rc.$rc&quot;
  RELEASE_URLBASE=https://nodejs.org/download/rc/
fi

if [[ &quot;X${disttype}&quot; != &quot;Xrelease&quot; ]]; then
  perl -pi -e &quot;s/: release-only/:/g&quot; Makefile
fi

CONFIG_FLAGS=&quot;--download-path=${HOME}/node-icu/&quot;

if [ -z ${JOBS+x} ]; then
  export JOBS=2
fi

mkdir -p ${HOME}/node-icu/

# -j 1 is a temporary workaround for https://github.com/nodejs/node/issues/22006
#make -j $JOBS pkg-upload \
make -j 1 pkg-upload \
  DESTCPU=&quot;$DESTCPU&quot; \
  ARCH=&quot;$ARCH&quot; \
  DISTTYPE=&quot;$disttype&quot; \
  DATESTRING=&quot;$datestring&quot; \
  COMMIT=&quot;$commit&quot; \
  CUSTOMTAG=&quot;$CUSTOMTAG&quot; \
  RELEASE_URLBASE=&quot;$RELEASE_URLBASE&quot; \
  CONFIG_FLAGS=&quot;$CONFIG_FLAGS&quot;
</command>
        </hudson.tasks.Shell>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.core.ExpressionCondition" plugin="run-condition@1.0">
        <expression>osx10\d\d-release-tar</expression>
        <label>${ENV, var=&quot;nodes&quot;}</label>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>#!/bin/bash -ex

RELEASE_URLBASE=https://nodejs.org/download/${disttype}/
if [ &quot;X${disttype}&quot; == &quot;Xtest&quot; ]; then
  disttype=custom
  CUSTOMTAG=&quot;test${datestring}${commit}&quot;
  RELEASE_URLBASE=https://nodejs.org/download/test/
elif [ &quot;X${disttype}&quot; == &quot;Xv8-canary&quot; ]; then
  disttype=custom
  CUSTOMTAG=&quot;v8-canary${datestring}${commit}&quot;
  RELEASE_URLBASE=https://nodejs.org/download/v8-canary/
elif [ &quot;X${disttype}&quot; == &quot;Xrc&quot; ]; then
  disttype=custom
  CUSTOMTAG=&quot;rc.$rc&quot;
  RELEASE_URLBASE=https://nodejs.org/download/rc/
fi

if [[ &quot;X${disttype}&quot; != &quot;Xrelease&quot; ]]; then
  perl -pi -e &quot;s/: release-only/:/g&quot; Makefile
fi

CONFIG_FLAGS=&quot;--download-path=${HOME}/node-icu/&quot;

if [ -z ${JOBS+x} ]; then
  export JOBS=2
fi

mkdir -p ${HOME}/node-icu/
# -j 1 is a temporary workaround for https://github.com/nodejs/node/issues/22006
#make -j $JOBS tar-upload \
make -j 1 tar-upload \
  DESTCPU=&quot;$DESTCPU&quot; \
  ARCH=&quot;$ARCH&quot; \
  DISTTYPE=&quot;$disttype&quot; \
  DATESTRING=&quot;$datestring&quot; \
  COMMIT=&quot;$commit&quot; \
  CUSTOMTAG=&quot;$CUSTOMTAG&quot; \
  RELEASE_URLBASE=&quot;$RELEASE_URLBASE&quot; \
  CONFIG_FLAGS=&quot;$CONFIG_FLAGS&quot;
</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Shell>
          <command>#!/bin/bash -ex

RELEASE_URLBASE=https://nodejs.org/download/${disttype}/
if [ &quot;X${disttype}&quot; == &quot;Xtest&quot; ]; then
  disttype=custom
  CUSTOMTAG=&quot;test${datestring}${commit}&quot;
  RELEASE_URLBASE=https://nodejs.org/download/test/
elif [ &quot;X${disttype}&quot; == &quot;Xv8-canary&quot; ]; then
  disttype=custom
  CUSTOMTAG=&quot;v8-canary${datestring}${commit}&quot;
  RELEASE_URLBASE=https://nodejs.org/download/v8-canary/
elif [ &quot;X${disttype}&quot; == &quot;Xrc&quot; ]; then
  disttype=custom
  CUSTOMTAG=&quot;rc.$rc&quot;
  RELEASE_URLBASE=https://nodejs.org/download/rc/
fi

if [[ &quot;X${disttype}&quot; != &quot;Xrelease&quot; ]]; then
  perl -pi -e &quot;s/: release-only/:/g&quot; Makefile
fi

CONFIG_FLAGS=&quot;--download-path=${HOME}/node-icu/&quot;

if [ -z ${JOBS+x} ]; then
  export JOBS=2
fi

make docclean
mkdir -p ${HOME}/node-icu/
# -j 1 is a temporary workaround for https://github.com/nodejs/node/issues/22006
# make -j $JOBS doc-upload \
make -j 1 doc-upload \
  DESTCPU=&quot;$DESTCPU&quot; \
  ARCH=&quot;$ARCH&quot; \
  DISTTYPE=&quot;$disttype&quot; \
  DATESTRING=&quot;$datestring&quot; \
  COMMIT=&quot;$commit&quot; \
  CUSTOMTAG=&quot;$CUSTOMTAG&quot; \
  RELEASE_URLBASE=&quot;$RELEASE_URLBASE&quot; \
  CONFIG_FLAGS=&quot;$CONFIG_FLAGS&quot; \
  DOCS_ANALYTICS=&quot;UA-67020396-1&quot;
make docclean
</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Shell>
          <command>#!/bin/bash -ex

RELEASE_URLBASE=https://nodejs.org/download/${disttype}/
if [ &quot;X${disttype}&quot; == &quot;Xtest&quot; ]; then
  disttype=custom
  CUSTOMTAG=&quot;test${datestring}${commit}&quot;
  RELEASE_URLBASE=https://nodejs.org/download/test/
elif [ &quot;X${disttype}&quot; == &quot;Xv8-canary&quot; ]; then
  disttype=custom
  CUSTOMTAG=&quot;v8-canary${datestring}${commit}&quot;
  RELEASE_URLBASE=https://nodejs.org/download/v8-canary/
elif [ &quot;X${disttype}&quot; == &quot;Xrc&quot; ]; then
  disttype=custom
  CUSTOMTAG=&quot;rc.$rc&quot;
  RELEASE_URLBASE=https://nodejs.org/download/rc/
fi

if [[ &quot;X${disttype}&quot; != &quot;Xrelease&quot; ]]; then
  perl -pi -e &quot;s/: release-only/:/g&quot; Makefile
fi

CONFIG_FLAGS=&quot;--download-path=${HOME}/node-icu/&quot;

if [ -z ${JOBS+x} ]; then
  export JOBS=2
fi

mkdir -p ${HOME}/node-icu/
# -j 1 is a temporary workaround for https://github.com/nodejs/node/issues/22006
# make -j $JOBS tar-headers-upload \
make -j 1 tar-headers-upload \
  DESTCPU=&quot;$DESTCPU&quot; \
  ARCH=&quot;$ARCH&quot; \
  DISTTYPE=&quot;$disttype&quot; \
  DATESTRING=&quot;$datestring&quot; \
  COMMIT=&quot;$commit&quot; \
  CUSTOMTAG=&quot;$CUSTOMTAG&quot; \
  RELEASE_URLBASE=&quot;$RELEASE_URLBASE&quot; \
  PREFIX=&quot;/&quot; \
  CONFIG_FLAGS=&quot;$CONFIG_FLAGS&quot;
</command>
        </hudson.tasks.Shell>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>*-v*.*</artifacts>
      <allowEmptyArchive>true</allowEmptyArchive>
      <onlyIfSuccessful>true</onlyIfSuccessful>
      <fingerprint>true</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.tasks.Mailer plugin="mailer@1.21">
      <recipients>michael_dawson@ca.ibm.com</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ansicolor.AnsiColorBuildWrapper plugin="ansicolor@0.5.2">
      <colorMapName>xterm</colorMapName>
    </hudson.plugins.ansicolor.AnsiColorBuildWrapper>
  </buildWrappers>
  <executionStrategy class="org.jenkinsci.plugins.GroovyScriptMES" plugin="matrix-groovy-execution-strategy@1.0.7">
    <secureScript plugin="script-security@1.44">
      <script>def scriptUrl = &apos;https://raw.githubusercontent.com/nodejs/build/master/jenkins/scripts/VersionSelectorScript.groovy?1&apos;

def code = new URL(scriptUrl).getText(useCaches: false, requestProperties: [&apos;Connection&apos;: &apos;close&apos;])
println &quot;Got matrix selection script from ${scriptUrl}:&quot;
println &quot;-------------------------------------------------------------------&quot;
println code
println &quot;-------------------------------------------------------------------&quot;

buildType = &apos;release&apos;

evaluate(code)

return [ result, true ]
</script>
      <sandbox>false</sandbox>
    </secureScript>
    <scriptFile></scriptFile>
    <scriptType>script</scriptType>
  </executionStrategy>
  <childCustomWorkspace>.</childCustomWorkspace>
</matrix-project>
    
